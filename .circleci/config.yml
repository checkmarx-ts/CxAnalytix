version: 2.1
jobs:
  unit-test:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:3.1
    steps:
      - checkout
      - run: dotnet tool install trx2junit --tool-path ./.build_tools/trx2junit
      - run: dotnet test -v q -l "trx"
      - run: ./.build_tools/trx2junit/trx2junit *_Test*/TestResults/*.trx
      - run:
          name: collect test results for storage
          when: always
          command: |
            for D in $(ls -d *_Test*)
            do
              mkdir -p test-results/$D
              cp $(find $D/TestResults -name *.xml -print) test-results/$D
            done
      - store_test_results:
          path: test-results
          
      
  build:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:3.1
    steps:
      - checkout
      - run: dotnet build --version-suffix ${CIRCLE_BUILD_NUM} -c Release -o artifacts
      
  package-win:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:3.1
    steps:
      - checkout
      - run:
          name: Build & Package
          command: |
            export VERSION=$(echo ${CIRCLE_TAG} | sed -E 's/v(.+)/\1/g')
            dotnet publish -p:VersionPrefix=${VERSION} --version-suffix ${CIRCLE_BUILD_NUM} -c ReleaseWindows -o artifacts/win-x64 -r win-x64
            mkdir -p tmp
            python .circleci/zip.py --output "tmp/CxAnalytix${VERSION}-${CIRCLE_BUILD_NUM}.win-x64.zip" --input artifacts/win-x64
      - persist_to_workspace:
          root: tmp
          paths:
            - ./*

  package-linux:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:3.1
    steps:
      - checkout
      - run:
          name: Build & Package
          command: |
            export VERSION=$(echo ${CIRCLE_TAG} | sed -E 's/v(.+)/\1/g')
            dotnet publish -p:VersionPrefix=${VERSION} --version-suffix ${CIRCLE_BUILD_NUM} -c ReleaseLinux -o artifacts/linux-x64 -r linux-x64
            mkdir -p tmp
            python .circleci/zip.py --output "tmp/CxAnalytix${VERSION}-${CIRCLE_BUILD_NUM}.linux-x64.zip" --input artifacts/linux-x64
      - persist_to_workspace:
          root: tmp
          paths:
            - ./*

  publish-github-release:
    docker:
      - image: circleci/golang:1.9
    steps:
      - attach_workspace:
          at: tmp
      - run:
          name: "Publish Release on GitHub"
          command: |
            go get github.com/tcnksm/ghr
            pwd
            ls -lR
            BODY=$(sha256sum *)
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -n ${CIRCLE_TAG} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -body "SHA256:<BR>${BODY}" ${CIRCLE_TAG} .

  docker-push:
    docker:
      - image: docker:20-dind
        environment:
          DOCKER_REPO: docker.pkg.github.com/checkmarx-ts/cxanalytix-docker/cxanalytix
    steps:
      - setup_remote_docker
      - run:
          name: "Push Docker image to GitHub packages"
          command: |
            ls -lR
            set
            which curl
            mkdir -p docker
            unzip tmp/CxAnalytix*.linux-x64.zip -d docker
            docker login -u ${GITHUB_USER} -p ${GITHUB_TOKEN} docker.pkg.github.com
            docker build -f Dockerfile -t ${DOCKER_REPO}:${CIRCLE_TAG} -t ${DOCKER_REPO}:${CIRCLE_SHA1} -t ${DOCKER_REPO} docker
            docker push ${DOCKER_REPO}

workflows:
  version: 2
  package-release:
    jobs:
      - package-win:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
      - package-linux:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
      - publish-github-release:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
          requires:
              - package-win
              - package-linux
      - docker-push:
          filters:
              tags:
                only: /^v.*/
              branches:
                ignore: /.*/
          requires:
              - package-linux      
  ci:
    jobs:
      - unit-test
      - build:
          requires:
              - unit-test



   

